#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void CadastrarNovoUsuario(); //ok
int VerificarLogin();//ok
void menu2();//ok
void InserirNovoPaciente(); //ok
void InserirNovoMedico();//ok
void BuscarPacientePorNome(); //ok
void AlterarDadosPaciente(); //ok
void BuscarMedicoPorNome();//ok
void ListarMedicosPorEspecialidade();//ok
void AlterarDadosMedico();//ok
void InserirNovaConsulta();
void ListarConsultasPorMedico();
void ListarConsultasPorPaciente();
void ListarConsultasPorData();



int main()
{

  int opcao;
  printf("Digite (1) para efetuar o login e (2) para cadastrar novo usuario e (0) para encerrar)...");
  scanf("%d%*c", &opcao);
  if (opcao == 1) {
        VerificarLogin();
      if(VerificarLogin()==1){
        menu2();
      }  
   }else if (opcao == 2) {
        CadastrarNovoUsuario(); 
       } else if (opcao ==3)
            exit(0);  
 system ("pause");//pausa na tela, somente para Windows
  return(0);
}

void CadastrarNovoUsuario(){
typedef struct {
    char usuario[20];
    char senha[10];
}Login;

 Login login;
    FILE *ptarqLogin;   
    ptarqLogin = fopen ("Login.bin", "ab"); //Se não abriu, cria.
    printf("Digite o usuario: ");
    scanf("%[^\n]", login.usuario);
    printf("Digite a senha: ");
    scanf("%[^\n]", login.senha);
    //Gravando os dados no arquivo usando a função fwrite
    fwrite (&login, sizeof (Login), 1, ptarqLogin);
    fclose (ptarqLogin);
}

int VerificarLogin() {
    Login login;
    FILE *ptarqLogin;
    char usuario[20];
    char senha[10];
    ptarqLogin = fopen ("Login.bin", "rb");
    if (ptarqLogin == NULL) {
        printf("Erro ao abrir o arquivo de login.\n");
        exit (0);
    }
   // Login usuarioCadastro;
    int tentativas = 3;
    while (tentativas > 0){
        printf("Digite o nome de usuario: ");
        scanf("%s", usuario);
        printf("Digite a senha: ");
        scanf("%s", senha);
        int encontrado = 0;
        while (fread(&login, sizeof(Login), 1, ptarqLogin)) {
            if (strcmp(usuario, login.usuario) == 0 && strcmp(senha, login.senha) == 0) 
            printf("Login efetuado com sucesso!\n");
            }
        }

    tentativas--;
    if (tentativas > 0) {
        printf("Login ou senha invalidos. Voce tem mais %d tentativa(s).\n", tentativas);
    } else {
        printf("Login ou senha invalidos. Numero maximo de tentativas excedido.\n");
    }
    fclose(ptarqLogin);
        exit(0);
    }

                  //  rewind(file); // Reinicia a leitura do arquivo para nova tentativa



void menu2(){
    int opcao2;
    int opcao3;        
    int opcao4;
    int opcao5;
    printf("Digite (1) paciente \n (2) medico \n (3) consulta \n (0) para encerrar)...");
    scanf("%d%*c", &opcao2);
    if (opcao2 == 1) {
        printf("Digite (1) para cadastrar novo paciente \n (2) buscar paciente(nome) e exibir \n (3) alterar dados do paciente(exceto o CPF)\n (0) para encerrar)...");
        scanf("%d%*c", &opcao3);
        if (opcao3 == 1) {
            InserirNovoPaciente();
        }else if (opcao3 == 2) {
            BuscarPacientePorNome(); 
            } else if (opcao3 == 3) {
                AlterarDadosPaciente(); 
                } else if (opcao3 ==0)
                    exit(0);   
   }

   else if (opcao2 == 2) {
        printf("Digite (1) para cadastrar novo medico \n (2) buscar medico(nome) e exibir \n (3) listar medicos de x especialidade \n (4) alterar dados do medico(exceto o CRM)\n (0) para encerrar)...");
        scanf("%d%*c", &opcao4);
        if (opcao4== 1) {
            InserirNovoMedico();
        }else if (opcao4 == 2) {
            BuscarMedicoPorNome(); 
            } else if (opcao4 == 3) {
                ListarMedicosPorEspecialidade(); 
                } else if (opcao4 == 4) {
                    AlterarDadosMedico(); 
                    } else if (opcao4 ==0)
                        exit(0);   
        }

        else if (opcao2 == 3) {
        printf("Digite (1) para cadastrar uma nova consulta \n (2) listar todas consultas de um medico \n (3) listar consultas de um paciente \n (4) listar consultas de um dia\n (0) para encerrar)...");
        scanf("%d%*c", &opcao5);
        if (opcao5== 1) {
            InserirNovaConsulta();
        }else if (opcao5 == 2) {
            ListarConsultasPorMedico(); 
            } else if (opcao5 == 3) {
                ListarConsultasPorPaciente(); 
                } else if (opcao5 == 4) {
                    ListarConsultasPorData(); 
                    } else if (opcao5 ==3)
                        exit(0);   
        }  
// system ("pause");//pausa na tela, somente para Windows
}

void InserirNovoPaciente(){
typedef struct {
    char CPF[12];
    char nome[30];
    char data_de_nascimento[11];
    char telefone[14];
}Paciente;

 Paciente pacientes;
    FILE *ptarqPaciente;   
    ptarqPaciente = fopen ("Pacientes.bin", "ab"); //Se não abriu, cria.
    printf("Digite o cpf do paciente: ");
    scanf("%[^\n]", pacientes.CPF);
    printf("Digite o nome do paciente: ");
    scanf("%[^\n]", pacientes.nome);
    printf("Digite a data de nascimento do paciente: ");
    scanf("%[^\n]", pacientes.data_de_nascimento);
    printf("Digite o telefone do paciente: ");
    scanf("%[^\n]", pacientes.telefone);
    //Gravando os dados no arquivo usando a função fwrite
    fwrite (&pacientes, sizeof (Paciente), 1, ptarqPaciente);
    fclose (ptarqPaciente);
}

void InserirNovoMedico(){
typedef struct {
    char CRM[6];
    char nome[50];
    char especialidade[20];
    char data_de_nascimento[11];
    float valor_hora_trabalho;
    char telefone[14];
} Medico;

Medico medico;
    FILE *ptarqMedico;   
    ptarqMedico = fopen ("Medicos.bin", "ab"); //Se não abriu, cria.
    printf("Digite o crm do medico: ");
    scanf("%[^\n]", medico.CRM);
    printf("Digite o nome do medico: ");
    scanf("%[^\n]", medico.nome);
    printf("Digite a especialidade do medico: ");
    scanf("%[^\n]", medico.especialidade);
    printf("Digite a data de nascimento do medico: ");
    scanf("%[^\n]", medico.data_de_nascimento);
    printf("Digite o valor da hora de trabalho do medico: ");
    scanf("%f", &medico.valor_hora_trabalho);
    printf("Digite o telefone do medico: ");
    scanf("%[^\n]", medico.telefone);
    //Gravando os dados no arquivo usando a função fwrite
    fwrite (&medico, sizeof (Medico), 1, ptarqMedico);
    fclose (ptarqMedico);
}



void BuscarPacientePorNome(){
    FILE *ptarqPaciente;
    Paciente pacientes;
    char nome[30];
    printf("Digite o nome do paciente: ");
    scanf("%[^\n]", nome);
    ptarqPaciente = fopen ("Pacientes.bin", "rb");
        if (ptarqPaciente == NULL){
            printf("Erro ao abrir o arquivo.\n");
            exit(1);    
        }

        while (fread(&pacientes, sizeof(Paciente), 1, ptarqPaciente)){
            if (strcmp(nome, pacientes.nome) == 0) 
                printf("nome: %s\nCPF: %s\nData nascimento: %s\ntelefone: %s\n", pacientes.nome, pacientes.CPF, pacientes.data_de_nascimento);
            printf("paciente nao encontrado");
        }
        fclose(ptarqPaciente);   
        }

void AlterarDadosPaciente(){
        char nomeAlterar[20];
        Paciente newPaciente;
        printf("Digite no Nome do paciente que se quer alterar:");
        scanf("%[^\n]%*c", nomeAlterar);
        //busca no nome no arquivo binário
         FILE *ptarqPaciente;   
        ptarqPaciente = fopen ("Pacientes.bin", "rb+");
        //controle vai armazenar a posição do registro a ser alterado no arquivo
        int controle = 0, achou = 0;
        while(fread(&newPaciente, sizeof (Paciente), 1, ptarqPaciente)){
            if (strcmp(nomeAlterar, newPaciente.nome)==0){
              printf("Dados Encontrados: \n Nome: %s, CPF: %s, data de nascimento: %s, telefone: %s", newPaciente.nome , newPaciente.cpf, newPaciente.data_de_nascimento, newPaciente.telefone);
              achou = 1;
              break;	  
              }
            controle++;  
          }
         //depois de buscar, lê os dados novos
         if (achou == 1){
           printf("\nInsira os dados novos: Nome, Data de nascimento e telefone");
           printf("\nDigite o nome do paciente: ");
            scanf("%[^\n]", newPaciente.nome);
            printf("\nDigite a data de nascimento: ");
            scanf("%[^\n]", &newPaciente.data_de_nascimento);
            printf("\nDigite o telefone: ");
            scanf("%[^\n]", &newPaciente.telefone);
            //posiciona no registro int fseek(FILE *fp, long numbytes, int origem)
                // SEEK_SET (a partir do inicio do arquivo), SEEK_CUR (a partir da posição atual), SEEK_END (fim do arquivo)
            fseek(ptarqPaciente, (controle)*sizeof(Paciente), SEEK_SET);

            //grava novos dados
            fwrite (&newPaciente, sizeof(Paciente), 1, ptarqPaciente);
         } else {
            printf("Registro não localizado!!!");
         }
        fclose (ptarqPaciente);

    }
            
    void BuscarMedicoPorNome(){
        FILE *ptarqMedico;
        Medico medico;
        char nome[30];
        printf("Digite o nome do medico: ");
        scanf("%[^\n]*%c", nome);//pegar o \n mascara
            ptarqMedico = fopen ("Medicos.bin", "rb");
            if (ptarqMedico == NULL){
                printf("Erro ao abrir o arquivo.\n");
                exit(1);    
            }

            while (fread(&medico, sizeof(Medico), 1, ptarqMedico)){
                if (strcmp(nome, medico.nome) == 0) 
                    printf("nome: %s\nCRM: %s\nEspecialidade: %s\nData nascimento: %s\nvalor hora de trabalho: %f\ntelefone: %s\n", medico.nome, medico.CRM, medico.especialidade, medico.data_de_nascimento, medico.valor_hora_trabalho, medico.telefone);
            }
        printf("medico nao encontrado");
        fclose(ptarqMedico);
        exit(0);
        }

void listarMedicosPorEspecialidade(){
    FILE *ptarqMedico;
    Medico medico;
    char especialidade[20];
    int contaespecialidade = 0;
    printf("Digite a especialidade do medico: ");
    scanf("%[^\n]", especialidade);
        ptarqMedico = fopen ("Medicos.bin", "rb");
        if (ptarqMedico == NULL){
            printf("Erro ao abrir o arquivo.\n");
            exit(1);    
        }
        while (fread(&medico, sizeof(Medico), 1, ptarqMedico)){
            if (strcmp(especialidade, medico.especialidade) == 0) {
                contaespecialidade++;
                printf("nome: %s\nCRM: %s\nEspecialidade: %s\nData nascimento: %s\nvalor hora de trabalho: %f\ntelefone: %s\n", medico.nome, medico.CRM, medico.especialidade, medico.data_de_nascimento, medico.valor_hora_trabalho, medico.telefone);
            }
            printf("especialidade nao encontrada");
        }
    fclose(ptarqMedico);
    return 1;
            
        }

void AlterarDadosMedico(){
        char nomeMedicoAlterar[20];
        Medico newMedico;
        printf("Digite no Nome do Medico que se quer alterar:");
        scanf("%[^\n]%*c", nomeMedicoAlterar);
        //busca no nome no arquivo binário
         FILE *ptarqMedico;   
        ptarqMedico = fopen ("Medicos.bin", "rb+");
        //controle vai armazenar a posição do registro a ser alterado no arquivo
        int controle = 0, achou = 0;
        while(fread(&newMedico, sizeof (Medico), 1, ptarqMedico)){
            if (strcmp(nomeMedicoAlterar, newMedico.nome)==0){
                 printf("dados do medico encontratdo: \nnome: %s\nCRM: %s\nEspecialidade: %s\nData nascimento: %s\nvalor hora de trabalho: %f\ntelefone: %s\n", newMedico.nome, newMedico.CRM, newMedico.especialidade, newMedico.data_de_nascimento, newMedico.valor_hora_trabalho, newMedico.telefone);
            achou = 1;
            break;	  
            }
            controle++;  
          }
         //depois de buscar, lê os dados novos
         if (achou == 1){
           printf("\nInsira os dados novos:");
             printf("\nDigite o nome do medico: ");
             scanf("%[^\n]", newMedico.nome);
             printf("\nDigite a especialidade do medico: ");
             scanf("%[^\n]", newMedico.especialidade);
            printf("\nDigite a data de nascimento: ");
            scanf("%[^\n]", newMedico.data_de_nascimento);
             printf("\nDigite o valor hora de trabalho do medico: ");
             scanf("%[^\n]", newMedico.valo_hora_trabalho);
            printf("\nDigite o telefone: ");
            scanf("%[^\n]", newMedico.telefone);
            //posiciona no registro int fseek(FILE *fp, long numbytes, int origem)
                // SEEK_SET (a partir do inicio do arquivo), SEEK_CUR (a partir da posição atual), SEEK_END (fim do arquivo)
            fseek(ptarqMedico, (controle)*sizeof(Medico), SEEK_SET);

            //grava novos dados
            fwrite (&newMedico, sizeof(Medico), 1, ptarqMedico);
         } else {
            printf("Registro do medico não localizado!!!");
         }
        fclose (ptarqMedico);

    }


void InserirNovaConsulta(){
typedef struct {
    char crm_medico[6];
    char cpf_paciente[12];
    char data[11];
    char sintomas[100];
    char encaminhamentos[100];
} Consulta;

Consulta consulta;
    FILE *ptarqConsulta;   
    ptarqConsulta = fopen ("Consultas.bin", "ab"); //Se não abriu, cria.
    if (ptarqConsulta == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        exit(1);
    }
    printf("Digite o crm do medico: ");
    scanf("%[^\n]", consulta.crm_medico);
    printf("Digite o cpf do paciente: ");
    scanf("%[^\n]", consulta.cpf_paciente);
    printf("Digite a data: ");
    scanf("%[^\n]", consulta.data);
    printf("Digite os sintomas: ");
    scanf("%[^\n]", consulta.sintomas);
    printf("Digite o encaminhamento: ");
    scanf("%[^\n]", consulta.encaminhamentos);
    //Gravando os dados no arquivo usando a função fwrite
    fwrite (&consulta, sizeof (Consulta), 1, ptarqConsulta);
    fclose (ptarqConsulta);
}
